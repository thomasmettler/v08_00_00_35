////////////////////////////////////////////////////////////////////////
// Class:       T0Dumper
// Module Type: analyzer
// File:        T0Dumper_module.cc
//
// Generated at Thu Dec  7 06:25:07 2017 by Thomas Mettler using artmod
// from cetpkgsupport v1_13_00.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
//#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "art/Framework/Services/Optional/TFileService.h"

#include "lardataobj/AnalysisBase/T0.h" 


#include "TTree.h"

#include <iostream>
#include <stdio.h>
#include <sstream>
#include <vector>
#include <map>
#include <utility>
#include <cmath> 
#include <memory>


namespace crt {
  class T0Dumper;
}

class crt::T0Dumper : public art::EDAnalyzer {
public:
  explicit T0Dumper(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  T0Dumper(T0Dumper const &) = delete;
  T0Dumper(T0Dumper &&) = delete;
  T0Dumper & operator = (T0Dumper const &) = delete;
  T0Dumper & operator = (T0Dumper &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;
  
  void initialize_hits();
  void initialize_tracks();


private:

  // Declare member data here.
  art::ServiceHandle<art::TFileService> tfs;
  
  int verbose_;
  //int numberOfevents_;
  std::string data_label_t0_;
  
  int saveTTree_;
  
  //quallity plots for hits//////////////////////
  
  //tree variables for hits///////////////////
  TTree*       my_t0_;
  double crtt0_time = -1;
  int crtt0_trig = -1;
  double crtt0_DCA = -1;
  int crtt0_plane = -1;

};


crt::T0Dumper::T0Dumper(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{
  verbose_ = p.get<int>("verbose");
  //numberOfevents_ = p.get<int>("Number_of_Events");
  data_label_t0_ = p.get<std::string>("data_label_t0");
  saveTTree_ = p.get<int>("saveTTree");

}

void crt::T0Dumper::analyze(art::Event const & evt)
{
  // Implementation of required member function here.
  //analyse hits///////////////////////////////////////////////////////////////////////////////////
  art::Handle< std::vector<anab::T0> > rawHandle_t0;
  evt.getByLabel(data_label_t0_, rawHandle_t0); //what is the product instance name? no BernZMQ
  int hits_valid=1;
  //check to make sure the data we asked for is valid                                                                                                      
  if(!rawHandle_t0.isValid()){
    /*std::cout << "Run " << evt.run() << ", subrun " << evt.subRun()
              << ", event " << evt.event() << " has " << "\033[31m" << "zero" << "\033[0m"
              << " CRTHits " << " in module " << data_label_hits_ << std::endl;
    std::cout << std::endl;*/
    hits_valid=0;
    //return;
  }
  if(hits_valid!=0){
    //get better access to the data               
    std::vector<anab::T0> const& T0Collection(*rawHandle_t0);
    
    for(std::vector<int>::size_type i = 0; i != T0Collection.size(); i++) {//A 

      crtt0_time = T0Collection.at(i).Time();
      crtt0_trig = T0Collection.at(i).TriggerType();
      crtt0_DCA = T0Collection.at(i).TriggerConfidence();
      crtt0_plane = T0Collection.at(i).TriggerBits();

      if(saveTTree_ == 1) my_t0_->Fill();
    
    }//A
  }

  
}

void crt::T0Dumper::initialize_hits()
{
  // Implementation of required member function here.
  std::cout << "Initialize variables and histograms for hits" << std::endl;
  //tree stuff for hits: //////////////////////////////////////////////////////////////////////////////////
  my_t0_ = tfs->make<TTree>("my_t0","t0 Tree");
  my_t0_->Branch("crtt0_time", &crtt0_time, "crtt0_time us/D");
  my_t0_->Branch("crtt0_trig", &crtt0_trig, "crtt0_trig = 2/I");
  my_t0_->Branch("crtt0_DCA", &crtt0_DCA, "crtt0_DCA ncm/D");
  my_t0_->Branch("crtt0_plane", &crtt0_plane, "crtt0_plane 3=top/I");
  // hit stuff ends here ////////////////////////////////////////////////////////////////////////
}

void crt::T0Dumper::initialize_tracks()
{
  // Implementation of required member function here.
  std::cout << "Initialize variables and histograms for tracks" << std::endl;
  //tree stuff for tracks: //////////////////////////////////////////////////////////////////////////////////
  

}

void crt::T0Dumper::beginJob()
{
  // Implementation of optional member function here.
  initialize_hits();
  initialize_tracks();
  
}
void crt::T0Dumper::endJob()
{
  // Implementation of optional member function here.
}
DEFINE_ART_MODULE(crt::T0Dumper)
